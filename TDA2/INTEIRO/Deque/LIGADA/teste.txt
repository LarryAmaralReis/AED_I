#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "deque_ligado.h"

void inicializarDeque(DEQUE *d) {
    d->cabeca = malloc(sizeof(ELEMENTO));
    d->cabeca->anterior = d->cabeca;
    d->cabeca->proximo = d->cabeca;
}

void reinicializarDeque(DEQUE *d) {
    ELEMENTO *apagar;
    ELEMENTO *elemento = d->cabeca->proximo;
    while (elemento != d->cabeca) {
        apagar = elemento;
        elemento = elemento->proximo;
        free(apagar);
    }
    d->cabeca->anterior = d->cabeca;
    d->cabeca->proximo = d->cabeca;
}

void mostrarDeque(DEQUE *d) {
    printf("\n--------------------------");
    ELEMENTO *i = d->cabeca->proximo;
    while (i != d->cabeca) {
        printf("\n--------------------------");
        printf("\nValor: %d", i->valor);
        i = i->proximo;
    }
}

int inserirValorInicio(DEQUE *d, int novo_valor) {
    ELEMENTO *i = malloc(sizeof(ELEMENTO));
    if (i == NULL) {
        return 0; // Failed to allocate memory
    }
    i->valor = novo_valor;
    i->proximo = d->cabeca->proximo;
    i->anterior = d->cabeca;
    d->cabeca->proximo = i;
    i->proximo->anterior = i;
    return 1; // Successfully inserted
}

int inserirValorFim(DEQUE *d, int novo_valor) {
    ELEMENTO *i = malloc(sizeof(ELEMENTO));
    if (i == NULL) {
        return 0; // Failed to allocate memory
    }
    i->valor = novo_valor;
    i->proximo = d->cabeca;
    i->anterior = d->cabeca->anterior;
    d->cabeca->anterior = i;
    i->anterior->proximo = i;
    return 1; // Successfully inserted
}

int excluirValorInicio(DEQUE *d) {
    if (d->cabeca->proximo == d->cabeca) {
        return 0; // Deque is empty
    }
    ELEMENTO *i = d->cabeca->proximo;
    d->cabeca->proximo = i->proximo;
    i->proximo->anterior = d->cabeca;
    free(i);
    return 1; // Successfully deleted
}

int excluirValorFim(DEQUE *d) {
    if (d->cabeca->anterior == d->cabeca) {
        return 0; // Deque is empty
    }
    ELEMENTO *i = d->cabeca->anterior;
    d->cabeca->anterior = i->anterior;
    i->anterior->proximo = d->cabeca;
    free(i);
    return 1; // Successfully deleted
}

int getValorInicio(DEQUE *d) {
    if (d->cabeca->proximo == d->cabeca) {
        exit(EXIT_FAILURE); // or handle the error in a different way
    }
    return d->cabeca->proximo->valor;
}

int getValorFim(DEQUE *d) {
    if (d->cabeca->anterior == d->cabeca) {
        exit(EXIT_FAILURE); // or handle the error in a different way
    }
    return d->cabeca->anterior->valor;
}

int getValorMaior(DEQUE *d) {
    if (d->cabeca->proximo == d->cabeca) {
        exit(EXIT_FAILURE); // or handle the error in a different way
    }

    DEQUE auxiliar;
    inicializarDeque(&auxiliar);

    int maior = d->cabeca->proximo->valor;

    ELEMENTO *i = d->cabeca->proximo;
    while (i != d->cabeca) {
        if (i->valor > maior) {
            maior = i->valor;
        }
        i = i->proximo;
    }

    reinicializarDeque(&auxiliar);

    return maior;
}

int getValorMenor(DEQUE *d) {
    if (d->cabeca->proximo == d->cabeca) {
        exit(EXIT_FAILURE); // or handle the error in a different way
    }

    DEQUE auxiliar;
    inicializarDeque(&auxiliar);

    int menor = d->cabeca->proximo->valor;

    ELEMENTO *i = d->cabeca->proximo;
    while (i != d->cabeca) {
        if (i->valor < menor) {
            menor = i->valor;
        }
        i = i->proximo;
    }

    reinicializarDeque(&auxiliar);

    return menor;
}

void calcularMediaInserirInicio(DEQUE *d) {
    if (d->cabeca->proximo == d->cabeca) {
        exit(EXIT_FAILURE); // or handle the error in a different way
    }

    DEQUE auxiliar;
    inicializarDeque(&auxiliar);

    int totalValores = 0;
    int numValores = 0;

    ELEMENTO *i = d->cabeca->proximo;
    while (i != d->cabeca) {
        totalValores += i->valor;
        numValores++;
        i = i->proximo;
    }

    float media = (float)totalValores / numValores;

    inserirValorInicio(d, (int)media);

    reinicializarDeque(&auxiliar);
}

int excluirValorPorCodigo(DEQUE *d, int codigo) {
    if (d->cabeca->proximo == d->cabeca) {
        return 0; // Deque is empty
    }

    DEQUE auxiliar;
    inicializarDeque(&auxiliar);

    int valorRemovido = 0;

    ELEMENTO *i = d->cabeca->proximo;
    while (i != d->cabeca) {
        ELEMENTO *apagar = i;
        i = i->proximo;

        if (apagar->valor != codigo) {
            inserirValorFim(&auxiliar, apagar->valor);
        } else {
            free(apagar);
            valorRemovido = 1;
        }
    }

    reinicializarDeque(d);

    ELEMENTO *j = auxiliar.cabeca->proximo;
    while (j != auxiliar.cabeca) {
        ELEMENTO *mover = j;
        j = j->proximo;
        mover->proximo = d->cabeca->proximo;
        mover->anterior = d->cabeca;
        d->cabeca->proximo->anterior = mover;
        d->cabeca->proximo = mover;
    }

    reinicializarDeque(&auxiliar);

    return valorRemovido;
}

int posicaoPorValor(DEQUE *d, int valor) {
    if (d->cabeca->proximo == d->cabeca) {
        return -1; // Deque is empty, no elements to search
    }

    DEQUE auxiliar;
    inicializarDeque(&auxiliar);

    int posicao = 1;
    int posicaoEncontrada = -1;

    ELEMENTO *i = d->cabeca->proximo;
    while (i != d->cabeca) {
        if (i->valor == valor) {
            posicaoEncontrada = posicao;
        }
        inserirValorFim(&auxiliar, i->valor);
        i = i->proximo;
        posicao++;
    }

    reinicializarDeque(d);

    ELEMENTO *j = auxiliar.cabeca->proximo;
    while (j != auxiliar.cabeca) {
        ELEMENTO *mover = j;
        j = j->proximo;
        mover->proximo = d->cabeca->proximo;
        mover->anterior = d->cabeca;
        d->cabeca->proximo->anterior = mover;
        d->cabeca->proximo = mover;
    }

    reinicializarDeque(&auxiliar);

    return posicaoEncontrada;
}

int contarValores(DEQUE *d) {
    if (d->cabeca->proximo == d->cabeca) {
        return 0; // Deque is empty
    }

    DEQUE auxiliar;
    inicializarDeque(&auxiliar);

    int count = 0;

    ELEMENTO *i = d->cabeca->proximo;
    while (i != d->cabeca) {
        count++;
        inserirValorFim(&auxiliar, i->valor);
        i = i->proximo;
    }

    reinicializarDeque(d);

    ELEMENTO *j = auxiliar.cabeca->proximo;
    while (j != auxiliar.cabeca) {
        ELEMENTO *mover = j;
        j = j->proximo;
        mover->proximo = d->cabeca->proximo;
        mover->anterior = d->cabeca;
        d->cabeca->proximo->anterior = mover;
        d->cabeca->proximo = mover;
    }

    reinicializarDeque(&auxiliar);

    return count;
}

void removerAteValor(DEQUE *d, int valor) {
    if (d->cabeca->proximo == d->cabeca) {
        return; // Deque is empty
    }

    DEQUE auxiliar;
    inicializarDeque(&auxiliar);

    ELEMENTO *i = d->cabeca->proximo;
    while (i != d->cabeca && i->valor != valor) {
        ELEMENTO *apagar = i;
        i = i->proximo;
        apagar->proximo = NULL;
        apagar->anterior = NULL;
        free(apagar);
    }

    if (i != d->cabeca) {
        d->cabeca->proximo = i;
        i->anterior = d->cabeca;
        reinicializarDeque(&auxiliar);
    } else {
        reinicializarDeque(d);
    }
}
